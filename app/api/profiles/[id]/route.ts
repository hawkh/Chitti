// Individual profile API endpoint

import { NextRequest, NextResponse } from 'next/server';

// This would normally import from a database service
// For now, we'll use the same in-memory storage pattern

type RouteParams = {
  params: { id: string };
};

// GET /api/profiles/[id] - Get specific profile
export async function GET(request: NextRequest, { params }: RouteParams) {
  try {
    const { id } = params;

    // In a real app, this would query the database
    // For now, we'll make a request to the main profiles endpoint
    const baseUrl = request.url.replace(`/api/profiles/${id}`, '');
    const profilesResponse = await fetch(`${baseUrl}/api/profiles`);
    
    if (!profilesResponse.ok) {
      throw new Error('Failed to fetch profiles');
    }

    const profilesData = await profilesResponse.json();
    const profile = profilesData.data.find((p: any) => p.id === id);

    if (!profile) {
      return NextResponse.json({
        success: false,
        error: {
          message: 'Profile not found',
          code: 'PROFILE_NOT_FOUND'
        }
      }, { status: 404 });
    }

    return NextResponse.json({
      success: true,
      data: profile,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Get profile error:', error);
    return NextResponse.json({
      success: false,
      error: {
        message: 'Failed to retrieve profile',
        code: 'GET_PROFILE_ERROR'
      }
    }, { status: 500 });
  }
}

// POST /api/profiles/[id]/duplicate - Duplicate profile
export async function POST(request: NextRequest, { params }: RouteParams) {
  try {
    const { id } = params;
    const { action } = await request.json();

    if (action !== 'duplicate') {
      return NextResponse.json({
        success: false,
        error: {
          message: 'Invalid action. Only "duplicate" is supported.',
          code: 'INVALID_ACTION'
        }
      }, { status: 400 });
    }

    // Get the original profile
    const baseUrl = request.url.replace(`/api/profiles/${id}`, '');
    const profileResponse = await fetch(`${baseUrl}/api/profiles/${id}`);
    
    if (!profileResponse.ok) {
      return NextResponse.json({
        success: false,
        error: {
          message: 'Original profile not found',
          code: 'PROFILE_NOT_FOUND'
        }
      }, { status: 404 });
    }

    const profileData = await profileResponse.json();
    const originalProfile = profileData.data;

    // Create duplicate with modified name
    const duplicateProfile = {
      ...originalProfile,
      name: `${originalProfile.name} (Copy)`,
      id: undefined // Will be generated by the POST endpoint
    };

    // Create the duplicate profile
    const createResponse = await fetch(`${baseUrl}/api/profiles`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(duplicateProfile)
    });

    if (!createResponse.ok) {
      const errorData = await createResponse.json();
      return NextResponse.json(errorData, { status: createResponse.status });
    }

    const createdProfile = await createResponse.json();

    return NextResponse.json({
      success: true,
      data: createdProfile.data,
      message: 'Profile duplicated successfully',
      timestamp: new Date().toISOString()
    }, { status: 201 });

  } catch (error) {
    console.error('Duplicate profile error:', error);
    return NextResponse.json({
      success: false,
      error: {
        message: 'Failed to duplicate profile',
        code: 'DUPLICATE_PROFILE_ERROR'
      }
    }, { status: 500 });
  }
}